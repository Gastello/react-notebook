import Code from "../../components/code/Code";
import CodeSnippet from "../../components/codeSnippet/CodeSnippet";
import HookUseContextExample from "../../components/hooksExamples/HookUseContextExample/HookUseContextExample";
import Paragraph from "../../components/paragraph/Paragraph";
import Table from "../../components/table/Table";
import Title from "../../components/title/Title";
import Topic from "../../components/topic/Topic";

export default function HookUseContext() {
  return (
    <>
      <Topic title="‚úÖ –•—É–∫ useContext">
        <Paragraph>
          <strong>React Context</strong> ‚Äî —Ü–µ –º–µ—Ö–∞–Ω—ñ–∑–º –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ
          –ø–µ—Ä–µ–¥–∞–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —É –¥–µ—Ä–µ–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –±–µ–∑ –ø—Ä–æ–ø—Å-–¥—Ä–∏–ª—ñ–Ω–≥—É (–∫–æ–ª–∏
          –¥–æ–≤–æ–¥–∏—Ç—å—Å—è –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –ø—Ä–æ–ø—Å–∏ —á–µ—Ä–µ–∑ –±–∞–≥–∞—Ç–æ —Ä—ñ–≤–Ω—ñ–≤).
        </Paragraph>
        <Code
          code={`<MyContext.Provider value={"some data"}>
  <ComponentA />
</MyContext.Provider>`}
        />
        <Paragraph>
          –ë—É–¥—å-—è–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ ComponentA –º–æ–∂–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ &quot;some
          data&quot; —á–µ—Ä–µ–∑ useContext.
        </Paragraph>
        <Title text="–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î (—Å–ø—Ä–æ—â–µ–Ω–æ)" />
        <Paragraph>
          <ul className="list-disc list-inside">
            <li>–¢–∏ —Å—Ç–≤–æ—Ä—é—î—à –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ createContext(defaultValue)</li>
            <li>–û–±–≥–æ—Ä—Ç–∞—î—à –¥–µ—Ä–µ–≤–æ –≤ Provider —ñ –ø–µ—Ä–µ–¥–∞—î—à value</li>
            <li>
              –ë—É–¥—å-—è–∫–∏–π –Ω–∞—â–∞–¥–æ–∫ –º–æ–∂–µ –¥—ñ—Å—Ç–∞—Ç–∏ value —á–µ—Ä–µ–∑ useContext(Context)
            </li>
          </ul>
        </Paragraph>
        <Title text="–°–∏–Ω—Ç–∞–∫—Å–∏—Å" />
        <Paragraph>
          <strong>1. –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç:</strong>
        </Paragraph>
        <Code
          code={`import { createContext } from "react";

export const ThemeContext = createContext<"light" | "dark">("light");`}
        />
        <Paragraph>
          <strong>2. –î–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Provider:</strong>
        </Paragraph>
        <Code
          code={`<ThemeContext.Provider value="dark">
  <App />
</ThemeContext.Provider>`}
        />
        <Paragraph>
          <strong>3. –î—ñ—Å—Ç–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ:</strong>
        </Paragraph>
        <Code code={`const theme = useContext(ThemeContext); // "dark"`} />
        <Title text="–ö–æ–ª–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ Context" />
        <Paragraph>
          <Table
            columnsCount={2}
            elementsList={[
              "–í–∏–ø–∞–¥–æ–∫",
              "–ö–æ–Ω—Ç–µ–∫—Å—Ç",
              "–¢–µ–º–∞ (dark/light)",
              "‚úÖ –¢–∞–∫",
              "–ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è (isLoggedIn)",
              "‚úÖ –¢–∞–∫",
              "–ú–æ–≤–∞/–ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è (locale)",
              "‚úÖ –¢–∞–∫",
              "–í–∏–±—Ä–∞–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç/—Ç–æ–≤–∞—Ä",
              "‚ùå –ù—ñ ‚Äî –∫—Ä–∞—â–µ state –≤ –±–ª–∏–∂—á–æ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ –∞–±–æ Zustand",
              "–ú–∞—Å–∏–≤ —Å–∫–ª–∞–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö",
              "‚ùå –ù—ñ ‚Äî –æ–±–µ—Ä–µ–∂–Ω–æ, –º–æ–∂–µ —Å–ø—Ä–∏—á–∏–Ω–∏—Ç–∏ —Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏",
            ]}
          />
        </Paragraph>
        <Title text="–ü—Ä–æ–±–ª–µ–º–∞ –∑ Context: —Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏" />
        <Paragraph>
          –í–µ—Å—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î useContext, –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å—Å—è, —è–∫—â–æ
          value –∑–º—ñ–Ω–∏—Ç—å—Å—è ‚Äî –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ —á–∞—Å—Ç–∏–Ω–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –∑–º—ñ–Ω–∏–ª–∏—Å—å.
        </Paragraph>
        <Code
          code="const MyContext = createContext({ a: 1, b: 2 });

const App = () => {
  const [val, setVal] = useState({ a: 1, b: 2 });

  return (
    <MyContext.Provider value={val}>
      <Child />
    </MyContext.Provider>
  );
};

// üîª –¶–µ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å—Å—è –ø—Ä–∏ –∫–æ–∂–Ω—ñ–π –∑–º—ñ–Ω—ñ val ‚Äî –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ b –Ω–µ –∑–º—ñ–Ω–∏—Ç—å—Å—è
const Child = () => {
  const ctx = useContext(MyContext);
  return <div>{ctx.b}</div>;
};
"
        />
        <Paragraph>
          –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è: –∞–±–æ —Ä–æ–∑–¥—ñ–ª—è–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∏, –∞–±–æ –º–µ–º–æ—ñ–∑—É–π –∑–Ω–∞—á–µ–Ω–Ω—è, –∞–±–æ –∫—Ä–∞—â–µ
          ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π Zustand / Redux.
        </Paragraph>
        <Title text="useContext vs Zustand/Redux" />
        <Paragraph>
          <Table
            columnsCount={3}
            elementsList={[
              "",
              "Context + useContext",
              "Zustand / Redux",
              "–ü—Ä–æ—Å—Ç–æ—Ç–∞",
              "‚úÖ –ü—Ä–æ—Å—Ç–∏–π",
              "‚ùå –°–∫–ª–∞–¥–Ω—ñ—à–µ",
              "–†–µ—Ä–µ–Ω–¥–µ—Ä –∫–æ–Ω—Ç—Ä–æ–ª—å",
              "‚ùå –°–ª–∞–±–∫–∏–π",
              "‚úÖ –ü–æ—Ç—É–∂–Ω–∏–π",
              "–ú–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è",
              "‚ùå –°–∫–ª–∞–¥–Ω–æ",
              "‚úÖ –õ–µ–≥–∫–æ",
              "DevTools",
              "‚ùå –ù–µ–º–∞—î",
              "‚úÖ –¢–∞–∫ (Redux/Zustand)",
            ]}
          />
        </Paragraph>
        <Title text="–¢–∏–ø–æ–≤—ñ –≥—Ä–∞–±–ª—ñ:" />
        <Paragraph>
          <strong>1. –ü–µ—Ä–µ–¥–∞—á–∞ –Ω–æ–≤–æ–≥–æ –æ–±&apos;—î–∫—Ç–∞ –∫–æ–∂–Ω–æ–≥–æ —Ä–∞–∑—É:</strong>
        </Paragraph>
        <Code
          code={`<MyContext.Provider value={{ a: 1 }} /> // ‚ùå
// –ù–æ–≤–∏–π –æ–±'—î–∫—Ç –∫–æ–∂–µ–Ω —Ä–µ–Ω–¥–µ—Ä ‚Üí –≤—Å—ñ useContext ‚Üí rerender
`}
        />
        <Paragraph>‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:</Paragraph>
        <Code
          code={`const value = useMemo(() => ({ a: 1 }), []);
<MyContext.Provider value={value} />`}
        />
        <Paragraph>
          <strong>2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–µ–∑ Provider:</strong>
        </Paragraph>
        <Code
          code={`const ctx = useContext(MyContext); // –û—Ç—Ä–∏–º–∞—î defaultValue, –Ω–µ –ø–æ—Ç–æ—á–Ω–µ`}
        />
        <Paragraph>
          <strong>3. useContext —É –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É:</strong> <br />
          –ù–µ –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ useContext —É–º–æ–≤–Ω–æ. –ó–∞–≤–∂–¥–∏ –º–∞—î –±—É—Ç–∏ –Ω–∞ –≤–µ—Ä—Ö–Ω—å–æ–º—É
          —Ä—ñ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞.
        </Paragraph>
        <Title text="–†–µ–∞–ª—å–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥" />
        <Paragraph>
          <strong>HookUseContextExample.tsx:</strong>
        </Paragraph>
        <Code
          code={`import { createContext, useState } from "react";
import HookUseContextContainer from "./HookUseContextContainer";

export const themes = {
  light: {
    backgroundColor: "white",
    text: "black",
  },
  dark: {
    backgroundColor: "black",
    text: "white",
  },
};
export type UserContextType = {
  user: string;
  setUser: (user: string) => void;
};
export const UserContext = createContext<UserContextType | undefined>(undefined);

export default function HookUseContextExample() {
  const [user, setUser] = useState("");

  return (
    <UserContext.Provider value={{ user, setUser }}>
      <HookUseContextContainer></HookUseContextContainer>
    </UserContext.Provider>
  );
}`}
        />
        <Paragraph>
          <strong>HookUseContextContainer.tsx:</strong>
        </Paragraph>
        <Code
          code={`import HookUseContextButton from "./HookUseContextButton";
import HookUseContextText from "./HookUseContextText";

export default function HookUseContextContainer() {
  return (
    <div className="flex gap-2 justify-center items-center">
      <HookUseContextText />
      <HookUseContextButton />
    </div>
  );
}`}
        />
        <Paragraph>
          <strong>HookUseContextButton.tsx:</strong>
        </Paragraph>
        <Code
          code={`import { useContext } from "react";
import { UserContext } from "./HookUseContextExample";

export default function HookUseContextButton() {
  const userContext = useContext(UserContext);
  if (!userContext) throw new Error("UserContext is missing");
  return (
    <button
      className="bg-white rounded p-2 text-gray-900 cursor-pointer"
      onClick={() => userContext.setUser("Gastello")}
    >
      Log In
    </button>
  );
}`}
        />
        <Paragraph>
          <strong>HookUseContextText.tsx:</strong>
        </Paragraph>

        <CodeSnippet
          code={`import { useContext } from "react";
import { UserContext } from "./HookUseContextExample";

export default function HookUseContextText() {
  const userContext = useContext(UserContext);
  if (!userContext) throw new Error("UserContext is missing");
  return (
    <span className="font-bold">
      {userContext.user ? userContext.user : "Guest"}
    </span>
  );
}`}
          result={<HookUseContextExample />}
        />
        <Paragraph>
          –£ –ø—Ä–∏–∫–ª–∞–¥—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç UserContext, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å user (—ñ–º‚Äô—è
          –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞) —Ç–∞ setUser (—Ñ—É–Ω–∫—Ü—ñ—é –π–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è). –ö–æ–Ω—Ç–µ–∫—Å—Ç
          —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º undefined, —â–æ–± –≥–∞—Ä–∞–Ω—Ç—É–≤–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ
          —Ö—Ç–æ—Å—å —Å–ø—Ä–æ–±—É—î –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –π–æ–≥–æ –ø–æ–∑–∞ –º–µ–∂–∞–º–∏ Provider. –£ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ
          HookUseContextExample —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è —á–µ—Ä–µ–∑
          UserContext.Provider. –î–æ—á—ñ—Ä–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ (HookUseContextText —ñ
          HookUseContextButton) –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å useContext –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è —ñ –∑–º—ñ–Ω–∏
          –∑–Ω–∞—á–µ–Ω–Ω—è. –¢–∞–∫–∏–º —á–∏–Ω–æ–º, –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–∑–≤–æ–ª—è—î –∑—Ä—É—á–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ —Å—Ç–∞–Ω –±–µ–∑
          –ø—Ä–æ–∫–∏–¥—É–≤–∞–Ω–Ω—è props –Ω–∞ –∫–æ–∂–Ω–æ–º—É —Ä—ñ–≤–Ω—ñ.
        </Paragraph>
      </Topic>
    </>
  );
}
