import Code from "../../components/code/Code";
import CodeSnippet from "../../components/codeSnippet/CodeSnippet";
import HookUseMemoExample from "../../components/hooksExamples/HookUseMemoExample";
import Paragraph from "../../components/paragraph/Paragraph";
import Table from "../../components/table/Table";
import Title from "../../components/title/Title";
import Topic from "../../components/topic/Topic";

export default function HookUseMemo() {
  return (
    <>
      <Topic title="‚úÖ –•—É–∫ useMemo">
        <Paragraph>
          <strong>useMemo</strong> ‚Äî —Ü–µ –æ–¥–∏–Ω —ñ–∑ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ–π–Ω–∏—Ö —Ö—É–∫i–≤ React, —è–∫–∏–π
          –¥–æ–∑–≤–æ–ª—è—î —É–Ω–∏–∫–∞—Ç–∏ –∑–∞–π–≤–∏—Ö –æ–±—á–∏—Å–ª–µ–Ω—å. –í—ñ–Ω –ø—Ä–∞—Ü—é—î –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ useCallback,
          –∞–ª–µ –∑–∞–º—ñ—Å—Ç—å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó, –≤—ñ–Ω –∑–±–µ—Ä—ñ–≥–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—á–∏—Å–ª–µ–Ω–Ω—è.
        </Paragraph>
        <Title text="–°–∏–Ω—Ç–∞–∫—Å–∏—Å" />
        <Code
          code={`const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);`}
        />
        <Paragraph>
          <ul className="list-disc list-inside">
            <li>computeExpensiveValue(a, b) ‚Äî –¥–æ–≤–≥–µ –∞–±–æ –∑–∞—Ç—Ä–∞—Ç–Ω–µ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è</li>
            <li>
              [a, b] ‚Äî –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ. –û–±—á–∏—Å–ª–µ–Ω–Ω—è –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è –ª–∏—à–µ —è–∫—â–æ a –∞–±–æ b
              –∑–º—ñ–Ω—è—Ç—å—Å—è
            </li>
          </ul>
        </Paragraph>
        <Title text="–î–ª—è —á–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω useMemo" />
        <Paragraph>
          <ul className="list-inside list-decimal">
            <li>
              <strong>–û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ —Å–∫–ª–∞–¥–Ω—ñ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è</strong> ‚Üí –Ø–∫—â–æ —Ç–∏ —Ä–æ–±–∏—à
              —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é, —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è, —á–∏ —â–æ—Å—å CPU-–≤–∞–∂–∫–µ ‚Äî –Ω–µ —Ö–æ—á–µ—à —Ü–µ
              –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏ –Ω–∞ –∫–æ–∂–Ω–æ–º—É —Ä–µ–Ω–¥–µ—Ä—ñ
            </li>
            <li>
              <strong>
                –£–Ω–∏–∫–Ω—É—Ç–∏ –∑–∞–π–≤–∏—Ö —Ä–µ—Ä–µ–Ω–¥–µ—Ä—ñ–≤ –¥–æ—á—ñ—Ä–Ω—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤, —è–∫—ñ –∑–∞–ª–µ–∂–∞—Ç—å
                –≤—ñ–¥ –æ–±&apos;—î–∫—Ç—ñ–≤/–º–∞—Å–∏–≤—ñ–≤ —É –ø—Ä–æ–ø—Å–∞—Ö
              </strong>{" "}
              ‚Üí –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –ø–µ—Ä–µ–¥–∞—î—à {`{ x: 1 }`} ‚Äî –∫–æ–∂–Ω–æ–≥–æ —Ä–∞–∑—É –Ω–æ–≤–∞ reference ‚Üí
              –º–µ–º–æ-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å—Å—è ‚Üí {`useMemo(() => ({ x: 1 }), [])`}{" "}
              —Ñ—ñ–∫—Å—É—î —Ü—é reference
            </li>
          </ul>
        </Paragraph>
        <Title text="–ü—Ä–∏–∫–ª–∞–¥ ‚Ññ1 ‚Äî –≤–∞–∂–∫–µ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è" />
        <Code
          code={`const expensiveCalculation = (num: number) => {
  console.log("Calculating...");
  for (let i = 0; i < 1e9; i++) {}
  return num * 2;
};

const MyComponent = ({ count }: { count: number }) => {
  const result = useMemo(() => expensiveCalculation(count), [count]);
  return <div>Result: {result}</div>;
};`}
        />
        <Paragraph>
          üîÅ –ë–µ–∑ useMemo: –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –±—É–¥–µ –Ω–∞ –∫–æ–∂–Ω–æ–º—É —Ä–µ–Ω–¥–µ—Ä—ñ <br />‚úÖ –ó useMemo:
          –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –∑–º—ñ–Ω—ñ count
        </Paragraph>
        <Title text="–ü—Ä–∏–∫–ª–∞–¥ ‚Ññ2 ‚Äî —Å—Ç–∞–±—ñ–ª—å–Ω–∞ reference –æ–±'—î–∫—Ç–∞" />
        <Code
          code={`const MyComponent = ({ items }: { items: string[] }) => {
  const sortedItems = useMemo(() => {
    return [...items].sort();
  }, [items]);

  return <List items={sortedItems} />;
};`}
        />
        <Paragraph>
          –ë–µ–∑ useMemo, sortedItems –∫–æ–∂–Ω–æ–≥–æ —Ä–∞–∑—É –±—É–¥–µ –Ω–æ–≤–∏–º –º–∞—Å–∏–≤–æ–º ‚Äî –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ
          items –Ω–µ –∑–º—ñ–Ω–∏–ª–∏—Å—è ‚Üí –¥–æ—á—ñ—Ä–Ω—ñ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç—Ä–∏–º–∞—î –Ω–æ–≤—ñ –ø—Ä–æ–ø—Å–∏ —ñ –±—É–¥–µ
          —Ä–µ—Ä–µ–Ω–¥–µ—Ä
        </Paragraph>
        <Title text="useMemo vs useCallback" />
        <Paragraph>
          <Table
            columnsCount={2}
            elementsList={[
              "useCallback",
              "useMemo",
              "–ó–±–µ—Ä—ñ–≥–∞—î —Ñ—É–Ω–∫—Ü—ñ—é",
              "–ó–±–µ—Ä—ñ–≥–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è (—Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—á–∏—Å–ª–µ–Ω—å)",
              "useCallback(() => fn, [deps])",
              "useMemo(() => compute(), [deps])",
              "–ß–∞—Å—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –ø—Ä–æ–ø—Å—ñ–≤",
              "–ß–∞—Å—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –æ–±—á–∏—Å–ª–µ–Ω—å",
            ]}
          />
        </Paragraph>
        <Title text="–ö–æ–ª–∏ –Ω–µ —Ç—Ä–µ–±–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ useMemo?" />
        <Paragraph>
          <ul className="list-disc list-inside">
            <li>–Ø–∫—â–æ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –¥–µ—à–µ–≤–µ ‚Äî —Ç–∏ —Ç—ñ–ª—å–∫–∏ –¥–æ–¥–∞—î—à —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å</li>
            <li>–Ø–∫—â–æ –Ω–µ –º–∞—î—à –ø—Ä–æ–±–ª–µ–º –∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é</li>
            <li>
              –Ø–∫—â–æ –Ω–µ –ø–µ—Ä–µ–¥–∞—î—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ memo-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –∞–±–æ –Ω–µ —Ö–æ—á–µ—à —É–Ω–∏–∫–Ω—É—Ç–∏
              re-render
            </li>
          </ul>
        </Paragraph>
        <Title text="–†–µ–∞–ª—å–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥" />
        <CodeSnippet
          code={`import { useEffect, useState, memo, useMemo } from "react";
        
export default function HookUseMemoExample() {
  const [array] = useState([1, 2, 3, 4, 5]);
  const [count, setCount] = useState(0);

  const filteredArray = useMemo(() => {
    return array.filter((x) => x % 2 == 0);
  }, [array]); // –º–µ–º–æ—ó–∑–æ–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ-—ó

  useEffect(() => {
    console.log("Parent rendered!");
  });
  return (
    <div className="flex justify-center items-center">
      <button
        className="py-2 px-3 font-bold cursor-pointer bg-white text-gray-900 rounded"
        type="button"
        onClick={() => {
          setCount((prev) => prev + 1);
        }}
      >
        {count}
      </button>
      <HookUseMemoExampleChild array={filteredArray} />
    </div>
  );
}

export const HookUseMemoExampleChild = memo(function HookUseMemoExampleChild({
  array,
}: {
  array: number[];
}) {
  useEffect(() => {
    console.log("Array rendered!");
  });

  return (
    <>
      <ul className="flex gap-1">
        {array.map((el, idx) => (
          <li key={idx}>{el}</li>
        ))}
      </ul>
    </>
  );
});`}
          result={<HookUseMemoExample />}
        />
      </Topic>
    </>
  );
}
